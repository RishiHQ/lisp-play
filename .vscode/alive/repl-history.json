[{"pkgName":"cl-user","text":"(horizontal-3-in-a-row)"},{"pkgName":"cl-user","text":"*game-board*"},{"pkgName":"cl-user","text":"(3-in-a-row 0 0 0 2 0 1)"},{"pkgName":"cl-user","text":"(setq *current-player* \"O\")"},{"pkgName":"cl-user","text":"*current-player*"},{"pkgName":"cl-user","text":"(set-cell 0 2 \"O\")"},{"pkgName":"cl-user","text":"(set-cell 0 1 \"O\")"},{"pkgName":"cl-user","text":"(set-cell 0 0 \"O\")"},{"pkgName":"cl-user","text":"(NIL)"},{"pkgName":"cl-user","text":"nil"},{"pkgName":"cl-user","text":"NIL"},{"pkgName":"cl-user","text":"(make-move 0 0)"},{"pkgName":"cl-user","text":"(set-cell 0 0 \"X\")"},{"pkgName":"cl-user","text":"T"},{"pkgName":"cl-user","text":"F"},{"pkgName":"cl-user","text":"(progn (print \"x\") (print \"y\"))"},{"pkgName":"cl-user","text":"(let ((x 1)) (+ x x))"},{"pkgName":"cl-user","text":"(let (x (1)) (+ x x))"},{"pkgName":"cl-user","text":"(let (x) (+ x x))"},{"pkgName":"cl-user","text":"(let (x 1) (+ x x))"},{"pkgName":"cl-user","text":"(finish-output)"},{"pkgName":"cl-user","text":"(string= *current-player* \"X\")"},{"pkgName":"cl-user","text":"(eql *current-player* \"X\")"},{"pkgName":"cl-user","text":"(if t \"h\" \"X\")"},{"pkgName":"cl-user","text":"(if t \"O\" \"X\")"},{"pkgName":"cl-user","text":"(other-player \"O\")"},{"pkgName":"cl-user","text":"(other-player \"X\")"},{"pkgName":"cl-user","text":"(make-move (get-row) (get-col))"},{"pkgName":"cl-user","text":"(get-col)"},{"pkgName":"cl-user","text":"get-col"},{"pkgName":"cl-user","text":"(setf (aref *game-board* 0 0) \"X\")"},{"pkgName":"cl-user","text":"(aref *game-board* 0 0)"},{"pkgName":"cl-user","text":"(aref *game-board 0 0)"},{"pkgName":"cl-user","text":"game-board"},{"pkgName":"cl-user","text":"(ploos 2 3)"},{"pkgName":"cl-user","text":"(defun ploos (a b) (+ a b))"},{"pkgName":"cl-user","text":"(get-row)"},{"pkgName":"cl-user","text":"(defun get-row ()   (print \"Enter a row: \")   (read))"},{"pkgName":"cl-user","text":"(defun get-row ()   ((print \"Enter a row: \")    (read)))"},{"pkgName":"cl-user","text":"(foo 1)"},{"pkgName":"cl-user","text":"foo(1)"},{"pkgName":"cl-user","text":"(defun foo (x) (print \"hi\"))"},{"pkgName":"cl-user","text":"(get-move)"},{"pkgName":"cl-user","text":"get-move"},{"pkgName":"cl-user","text":"(let (x) (1))"},{"pkgName":"cl-user","text":"(let (:x 1) ())"},{"pkgName":"cl-user","text":"(let (\"x 1) ())"},{"pkgName":"cl-user","text":"(let (x 1) ())"},{"pkgName":"cl-user","text":"(let (x \"jo\")) (print x))"},{"pkgName":"cl-user","text":"(let (x 12)) (print \"x\"))"},{"pkgName":"cl-user","text":"(let (x (:hello)) (print \"x\"))"},{"pkgName":"cl-user","text":"(let (x (\"hello\")) (print \"x\"))"},{"pkgName":"cl-user","text":"(play-game)"},{"pkgName":"cl-user","text":"(print-game-board)"},{"pkgName":"cl-user","text":"(play-turn)"},{"pkgName":"cl-user","text":"*turns-taken*"},{"pkgName":"cl-user","text":"(defun print-game-board ()   (loop for i from 0 below (array-dimension *game-board* 0) do           (loop for j from 0 below (array-dimension (game-board) 1) do                   (format t \" ~A \" (aref array i j)))           (format t \"~%\")))"},{"pkgName":"cl-user","text":"(array-dimension *game-board* 2)"},{"pkgName":"cl-user","text":"(array-dimension *game-board* 1)"},{"pkgName":"cl-user","text":"(array-dimension *game-board* 0)"},{"pkgName":"cl-user","text":"(array-dimension *game-board*)"},{"pkgName":"cl-user","text":"(length *game-board*)"},{"pkgName":"cl-user","text":"(defun print-game-board ()   (dotimes (i (length *game-board*)               (dotimes (j (length *game-board*) (print \"hi\"))))))"},{"pkgName":"cl-user","text":"(defun print-game-board ()   (dotimes (i (length *game-board*)               dotimes (j (length *game-board*) (print \"hi\")))))"},{"pkgName":"cl-user","text":"(defun print-game-board ()   (dotimes (i (length *game-board*)               dotimes (j (length *game-board*) (print \"hi\"))))"},{"pkgName":"cl-user","text":"(defvar *game-board* (make-array '(3 3) :initial-element \"-\")) "},{"pkgName":"cl-user","text":"(clear)"},{"pkgName":"cl-user","text":"(not (foo))"},{"pkgName":"cl-user","text":"(not foo)"},{"pkgName":"cl-user","text":"(defun foo () NIL)"},{"pkgName":"cl-user","text":"(deffun foo () 5)"},{"pkgName":"cl-user","text":"(loop while (< x 2)       do (progn (incf x)                 (print \"hi\")))"},{"pkgName":"cl-user","text":"(loop while (< X 2) do (progn (incf X) (print \"hi\"))"},{"pkgName":"cl-user","text":"(loop while (< X 2) (do (progn (incf X) (print \"hi\")))"},{"pkgName":"cl-user","text":"(defvar x 0)"},{"pkgName":"cl-user","text":"(loop while (< x 2) (do (progn (incf X) (print \"hi\")))"},{"pkgName":"cl-user","text":"X"},{"pkgName":"cl-user","text":"(defvar X 0)"},{"pkgName":"cl-user","text":"defvar X = 0"},{"pkgName":"cl-user","text":"((progn (print \"haha\") (print \"haha2\")))"},{"pkgName":"cl-user","text":"do (progn (print \"haha\") (print \"haha2\"))"},{"pkgName":"cl-user","text":"clear"},{"pkgName":"cl-user","text":"(game-over)"},{"pkgName":"cl-user","text":"(not (game-over))"},{"pkgName":"cl-user","text":"(defun game-over () (>= *turns-taken* 9))"},{"pkgName":"cl-user","text":"(incf *turns-taken*)"},{"pkgName":"cl-user","text":"(defvar *turns-taken* 0)"},{"pkgName":"cl-user","text":"(abort)"},{"pkgName":"cl-user","text":"(dotimes n 10 (print \"hello\"))"},{"pkgName":"cl-user","text":"(defun foo () T)"},{"pkgName":"cl-user","text":"(not NIL)"},{"pkgName":"cl-user","text":"(defun initialize-game-state () ((defvar game-board ((make-array '(3 3) :initial-element \"-\")))                                  (defvar current-player \"X\")                                  (defvar turns-taken 0)))"},{"pkgName":"cl-user","text":"(make-array '(3 2) :initial-element 1.0)"},{"pkgName":"cl-user","text":"(print \"test\")"},{"pkgName":"cl-user","text":"(list 3 2)"},{"pkgName":"cl-user","text":"'(3 2)"},{"pkgName":"cl-user","text":"'(3, 2)"}]